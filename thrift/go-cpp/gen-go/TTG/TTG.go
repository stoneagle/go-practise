// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package TTG

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type ResponseState int64
const (
  ResponseState_StateOk ResponseState = 0
  ResponseState_StateError ResponseState = 1
  ResponseState_StateEmpty ResponseState = 2
)

func (p ResponseState) String() string {
  switch p {
  case ResponseState_StateOk: return "StateOk"
  case ResponseState_StateError: return "StateError"
  case ResponseState_StateEmpty: return "StateEmpty"
  }
  return "<UNSET>"
}

func ResponseStateFromString(s string) (ResponseState, error) {
  switch s {
  case "StateOk": return ResponseState_StateOk, nil 
  case "StateError": return ResponseState_StateError, nil 
  case "StateEmpty": return ResponseState_StateEmpty, nil 
  }
  return ResponseState(0), fmt.Errorf("not a valid ResponseState string")
}


func ResponseStatePtr(v ResponseState) *ResponseState { return &v }

func (p ResponseState) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ResponseState) UnmarshalText(text []byte) error {
q, err := ResponseStateFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ResponseState) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ResponseState(v)
return nil
}

func (p * ResponseState) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - StudentID
type Request struct {
  StudentID int32 `thrift:"studentID,1" db:"studentID" json:"studentID"`
}

func NewRequest() *Request {
  return &Request{}
}


func (p *Request) GetStudentID() int32 {
  return p.StudentID
}
func (p *Request) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Request)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StudentID = v
}
  return nil
}

func (p *Request) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Request) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("studentID", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:studentID: ", p), err) }
  if err := oprot.WriteI32(int32(p.StudentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.studentID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:studentID: ", p), err) }
  return err
}

func (p *Request) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Request(%+v)", *p)
}

// Attributes:
//  - StudentID
//  - Name
//  - Infos
//  - State
type Response struct {
  StudentID int32 `thrift:"studentID,1" db:"studentID" json:"studentID"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Infos []string `thrift:"infos,3" db:"infos" json:"infos"`
  State ResponseState `thrift:"state,4" db:"state" json:"state"`
}

func NewResponse() *Response {
  return &Response{}
}


func (p *Response) GetStudentID() int32 {
  return p.StudentID
}

func (p *Response) GetName() string {
  return p.Name
}

func (p *Response) GetInfos() []string {
  return p.Infos
}

func (p *Response) GetState() ResponseState {
  return p.State
}
func (p *Response) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Response)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StudentID = v
}
  return nil
}

func (p *Response)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Response)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Infos =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Infos = append(p.Infos, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Response)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := ResponseState(v)
  p.State = temp
}
  return nil
}

func (p *Response) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Response) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("studentID", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:studentID: ", p), err) }
  if err := oprot.WriteI32(int32(p.StudentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.studentID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:studentID: ", p), err) }
  return err
}

func (p *Response) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *Response) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("infos", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:infos: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Infos)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Infos {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:infos: ", p), err) }
  return err
}

func (p *Response) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:state: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:state: ", p), err) }
  return err
}

func (p *Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Response(%+v)", *p)
}

type TTGService interface {
  // Parameters:
  //  - Request
  GetStudentInfo(ctx context.Context, request *Request) (r *Response, err error)
}

type TTGServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTTGService instead
func NewTTGServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TTGServiceClient {
  return &TTGServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTTGService instead
func NewTTGServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TTGServiceClient {
  return &TTGServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTTGServiceClient(c thrift.TClient) *TTGServiceClient {
  return &TTGServiceClient{
    c: c,
  }
}

// Parameters:
//  - Request
func (p *TTGServiceClient) GetStudentInfo(ctx context.Context, request *Request) (r *Response, err error) {
  var _args1 TTGServiceGetStudentInfoArgs
  _args1.Request = request
  var _result2 TTGServiceGetStudentInfoResult
  if err = p.c.Call(ctx, "getStudentInfo", &_args1, &_result2); err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

type TTGServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TTGService
}

func (p *TTGServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TTGServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TTGServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTTGServiceProcessor(handler TTGService) *TTGServiceProcessor {

  self3 := &TTGServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self3.processorMap["getStudentInfo"] = &tTGServiceProcessorGetStudentInfo{handler:handler}
return self3
}

func (p *TTGServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x4.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x4

}

type tTGServiceProcessorGetStudentInfo struct {
  handler TTGService
}

func (p *tTGServiceProcessorGetStudentInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TTGServiceGetStudentInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getStudentInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TTGServiceGetStudentInfoResult{}
var retval *Response
  var err2 error
  if retval, err2 = p.handler.GetStudentInfo(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStudentInfo: " + err2.Error())
    oprot.WriteMessageBegin("getStudentInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getStudentInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type TTGServiceGetStudentInfoArgs struct {
  Request *Request `thrift:"request,1" db:"request" json:"request"`
}

func NewTTGServiceGetStudentInfoArgs() *TTGServiceGetStudentInfoArgs {
  return &TTGServiceGetStudentInfoArgs{}
}

var TTGServiceGetStudentInfoArgs_Request_DEFAULT *Request
func (p *TTGServiceGetStudentInfoArgs) GetRequest() *Request {
  if !p.IsSetRequest() {
    return TTGServiceGetStudentInfoArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TTGServiceGetStudentInfoArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TTGServiceGetStudentInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTGServiceGetStudentInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &Request{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TTGServiceGetStudentInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getStudentInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTGServiceGetStudentInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TTGServiceGetStudentInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTGServiceGetStudentInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TTGServiceGetStudentInfoResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTTGServiceGetStudentInfoResult() *TTGServiceGetStudentInfoResult {
  return &TTGServiceGetStudentInfoResult{}
}

var TTGServiceGetStudentInfoResult_Success_DEFAULT *Response
func (p *TTGServiceGetStudentInfoResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return TTGServiceGetStudentInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *TTGServiceGetStudentInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TTGServiceGetStudentInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTGServiceGetStudentInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TTGServiceGetStudentInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getStudentInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTGServiceGetStudentInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TTGServiceGetStudentInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTGServiceGetStudentInfoResult(%+v)", *p)
}


